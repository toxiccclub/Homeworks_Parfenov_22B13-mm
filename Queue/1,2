#include <iostream>

using namespace std;

class Queue {
public:
	int top, size, end;
	double* p;

	Queue() :top(-1), size(0), end(-1), p(nullptr) {};
	Queue(int size) :top(-1),size(size), end(-1), p(new double[size]{}) { };

	bool isFull() {
		return ((end+1)%size==top);
	}

	bool isEmpty() {
		return (end==-1);
	}

	void push(double x) {
		if (isFull()) {
			cout << "Queue is full" << endl;
		}
		else {
			if (isEmpty()) {
				top++;
				end++;
				p[end] = x;
			}
			else{
				end = (end + 1) % size;
				p[end] = x;
			}
		}

	}

	double pop() {
		double elem;
		if (isEmpty()) {
			cout << "Queue is empty" << endl;
		}
		else if (top == end) {
			elem = p[top];
			p[top] = 0;
			top = -1;
			end = -1;
			return elem;
		}
		else {
			elem = p[top];
			p[top] = 0;
			top=(top+1)%size;
			return elem;

		}
	}

	void print() {
		cout << "Queue: " << endl;
		for (int i = 0; i < size; i++) {
			cout << p[i] << " ";
		}
		cout << endl;
	}
};



int main() {
	int size = 10;
	Queue q = (size);
	for (int i = 2; i < 10; i++) {
		q.push(i);
	}
	q.print();
	double a = q.pop();
	cout << a << endl;
	q.print();
	q.push(10);
	q.print();
	q.push(5);
	q.print();
	q.push(25);
	q.print();
	q.push(27);
	q.print();
	for (int i = 0; i < size+1; i++) {
		cout << q.pop() << endl;
	}

}
############################################################################################
#include <iostream>

using namespace std;

struct Node {
	double item;
	Node* next;
	Node(double item1, Node* next1) :item(item1), next(next1) {};
};

class QueueL {
public:
	Node* top;
	Node* end;

	QueueL(){
		top = new Node(0,nullptr);
		end = top;
	};


	void push(double item) {
		end->next = new Node(item,nullptr);
		end = end->next;
	}

	bool isEmpty() {
		return (top == end);
	}

	void print_S() {
		if (top == nullptr) {
			cout << "Stack is empty." << endl;
		}
		else {
			Node* p;
			p = top;
			while (p != nullptr) {
				cout << p->item << " ";
				p = p->next;
			}
			cout << endl;
		}
	}

	double popS() {
		double item;
		Node* p;
		if (top == nullptr) {
			return 0;
		}
		item = top->item;
		p = top;
		top = top->next;
		delete p;
		return item;
	}

	~QueueL() {
		while (!isEmpty()) {
			popS();
		}
	}
};

int main() {
	QueueL x;
	for (int i = 0; i <= 10; i++) {
		x.push(i);
	}
	cout << "Queue: "; x.print_S();
	cout << "Result of pop: " << x.popS() << endl;
	cout << "Queue: "; x.print_S();
}
