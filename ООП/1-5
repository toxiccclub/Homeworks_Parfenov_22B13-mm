#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <locale.h>
#include <initializer_list>

using namespace std;

class Polinomial {
public:
	int n; vector<double> coeff;
	Polinomial() :n(0), coeff({0}) {}
	Polinomial(int t, vector<double> c): n(t), coeff(c) {}
	Polinomial(double x) :n(0), coeff({ x }) {}
	Polinomial(const initializer_list<double>& t) :n(t.size() - 1), coeff(t){}
	Polinomial(Polinomial&& x) :n (x.n), coeff(x.coeff){
		x.n = 0;
		x.coeff.clear();
	}

	Polinomial& operator= (Polinomial&& x) {
		if (this == &x) {
			return *this;
		}

		coeff.clear();
		n = x.n;
		coeff = x.coeff;

		x.n = 0;
		x.coeff.clear();
		return *this;
	}

	double & operator () (double x) const {
		double result = 0;
		for (int i = 0; i < coeff.size(); i++) {
			result += coeff[i] * pow(x, i);
		}
		return result;
	}


	/*Polinomial(const Polinomial& a) {//конструктор копирования
		n = a.n;
		coeff.resize(n + 1);
		for (int i = 0; i <= n; i++) {
			coeff[i] = a.coeff[i];
		}
	}*/

	double & operator [] (int i) {
		static double w = -1;

		if (i >= 0 && i <= n)
			return coeff[i];
		else {
			cout << "Выход за границу"<<endl;
			return w;
		}
	}

	/*double& coef(int t) {
		static double c = -1;
		if (t > coeff.size()) {
			return c;
		}
		else {
			return coeff[t];
		}
	}*/

	/*double value(double t) {
		vector<double>::iterator it;
		double result=0;
		for (int i=0; i < coeff.size(); i++) {
			result += coeff[i] * pow(t,i);
		}
		return result;
	}*/

};


Polinomial operator + (Polinomial &a, Polinomial &b) {
	int size = max(a.n, b.n);
	Polinomial res;
	res.n = size;
	res.coeff.resize(size + 1);
	for (int i = 0; i <= size; i++) {
		int c1 = (i <= a.n) ? a.coeff[i] : 0;
		int c2 = (i <= b.n) ? b.coeff[i] : 0;
		res.coeff[i] = c1 + c2;
	}
	return res;
}

Polinomial operator - (Polinomial &a, Polinomial &b) {
	int size = max(a.n, b.n);
	Polinomial res;
	res.n = size;
	res.coeff.resize(size + 1);
	for (int i = 0; i <= size; i++) {
		int c1 = (i <= a.n) ? a.coeff[i] : 0;
		int c2 = (i <= b.n) ? b.coeff[i] : 0;
		res.coeff[i] = c1 - c2;
	}
	return res;
}

Polinomial operator* (Polinomial &a, Polinomial &b) {
	int size = a.n + b.n;
	Polinomial res;
	res.n = size;
	res.coeff.resize(size + 1);
	for (size_t i = 0; i <= a.n; i++) {
		for (size_t j = 0; j <= b.n; j++) {
			res.coeff[i + j] += a.coeff[i] * b.coeff[j];
		}
	}
	return res;
}

istream& operator >> (istream& st, Polinomial &a) {
	int n;
	cout << "Введите степень ";
	st >> n;
	vector<double> res;
	a.coeff.resize(n + 1);
	cout << "Введите коэффициенты ";
	for (int i = 0; i <= n; i++) {
		st >> a.coeff[i];
	}
	a.n=n;
	return st;
}

ostream& operator << (ostream& st, Polinomial &a) {
	st << "[";
	for (auto elem:a.coeff) {
		st << elem<<" ";
	}
	st << "]";
	st << endl;
	return st;
}


int main() {
	setlocale(LC_ALL, "Russian");
	Polinomial x;//(2,{100,21,33});
	Polinomial y;//(3,{10,21,3,4});
	Polinomial ea;//(2,{1,2,3});
	Polinomial w(3);
	cin >> x;
	cin >> y;
	cin >> ea;
	x = move(ea);
	double a = x[1];
	double b = x(2);
	Polinomial c(move(x + y));
	Polinomial d(move(x - y));
	Polinomial e(move(x * y));
	cout <<"Коэфф по номеру " << a <<endl<< "Значение в точке " << b << endl;
	cout <<"Многочлен 1 " << x << endl;
	cout <<"Многочлен 2 " << y << endl;
	cout << "Многочлен 3 " << ea << endl;
	cout <<"Сумма " << c << endl;
	cout <<"Разность " << d << endl;
	cout <<"Произведение " << e << endl;
	Polinomial z(move(x));//конструктор копирования
	cout <<"Копия" << z << endl;
	cout <<"Преобразование" << w << endl;
	cout <<"Присваивание" << x <<endl;
	Polinomial l{ 1,2,3,4,5 };
	cout << l << endl;


}
